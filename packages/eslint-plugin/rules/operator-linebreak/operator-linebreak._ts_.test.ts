import { run } from '#test'
import rule from '.'

run({
  name: 'operator-linebreak',
  rule,
  valid: [
    'type A = B | C',
    'type A = B | C | D',
    'type A = B & C',
    'type A = B & C & D',
    'type A = B \n| C',
    'type A = B \n& C',
    'type A =\n| B \n| C',
    'type A =\n& B \n& C',
    'type Check<T> = T extends string ? true : false',
    { code: 'type A = B |\n C', options: [null, { overrides: { '|': 'after' } }] },
    { code: 'type A = B &\n C', options: [null, { overrides: { '&': 'after' } }] },
    { code: 'type A = B \n| C\n | D', options: [null, { overrides: { '|': 'before' } }] },
    { code: 'type A = \n| B \n| C\n | D', options: [null, { overrides: { '|': 'before' } }] },
  ],
  invalid: [
    {
      code: 'type A = B | \nC',
      output: 'type A = B \n| C',
      options: [null, { overrides: { '|': 'before' } }],
      errors: [{
        messageId: 'operatorAtBeginning',
        data: { operator: '|' },
        type: 'TSTypeReference',
        line: 1,
        column: 12,
        endLine: 1,
        endColumn: 13,
      }],
    },
    {
      code: 'type A = B &\n C',
      output: 'type A = B\n & C',
      options: [null, { overrides: { '&': 'before' } }],
      errors: [{
        messageId: 'operatorAtBeginning',
        data: { operator: '&' },
        type: 'TSTypeReference',
        line: 1,
        column: 12,
        endLine: 1,
        endColumn: 13,
      }],
    },
    {
      code: 'type Pair = \n[string, number]',
      output: 'type Pair \n= [string, number]',
      options: [null, { overrides: { '=': 'before' } }],
      errors: [{
        messageId: 'operatorAtBeginning',
        data: { operator: '=' },
        type: 'TSTypeAliasDeclaration',
        line: 1,
        column: 11,
        endLine: 1,
        endColumn: 12,
      }],
    },
    {
      code: 'type Check<T> = T extends string\n ? true : false',
      output: 'type Check<T> = T extends string ?\n true : false',
      options: [null, { overrides: { '?': 'after' } }],
      errors: [{
        messageId: 'operatorAtEnd',
        data: { operator: '?' },
        type: 'TSStringKeyword',
        line: 2,
        column: 2,
        endLine: 2,
        endColumn: 3,
      }],
    },
    {
      code: 'type Check<T> = T extends string ?\n true : false',
      output: 'type Check<T> = T extends string\n ? true : false',
      options: [null, { overrides: { '?': 'before' } }],
      errors: [{
        messageId: 'operatorAtBeginning',
        data: { operator: '?' },
        type: 'TSStringKeyword',
        line: 1,
        column: 34,
        endLine: 1,
        endColumn: 35,
      }],
    },
    {
      code: 'type Check<T> = T extends string ? true\n : false',
      output: 'type Check<T> = T extends string ? true :\n false',
      options: [null, { overrides: { ':': 'after' } }],
      errors: [{
        messageId: 'operatorAtEnd',
        data: { operator: ':' },
        type: 'TSLiteralType',
        line: 2,
        column: 2,
        endLine: 2,
        endColumn: 3,
      }],
    },
    {
      code: 'type Check<T> = T extends string ? true :\n false',
      output: 'type Check<T> = T extends string ? true\n : false',
      options: [null, { overrides: { ':': 'before' } }],
      errors: [{
        messageId: 'operatorAtBeginning',
        data: { operator: ':' },
        type: 'TSLiteralType',
        line: 1,
        column: 41,
        endLine: 1,
        endColumn: 42,
      }],
    },
    {
      code: 'type A = B \n| C \n| D',
      output: 'type A = B | \nC | \nD',
      options: [null, { overrides: { '|': 'after' } }],
      errors: [
        {
          messageId: 'operatorAtEnd',
          data: { operator: '|' },
          type: 'TSTypeReference',
          line: 2,
          column: 1,
          endLine: 2,
          endColumn: 2,
        },
        {
          messageId: 'operatorAtEnd',
          data: { operator: '|' },
          type: 'TSTypeReference',
          line: 3,
          column: 1,
          endLine: 3,
          endColumn: 2,
        },
      ],
    },
  ],
})
